/*! react-kui v1.0.7 by chuchur (c) 2018 Licensed ISC */
(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{288:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=s(l(6)),a=s(l(5)),d=s(l(4)),r=s(l(3)),u=s(l(2)),c=s(l(1)),i=s(l(325)),f=s(l(333)),o=l(21);function s(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(e){(0,a.default)(this,t);var l=(0,r.default)(this,(t.__proto__||(0,n.default)(t)).call(this,e));return l.state={data:[{title:"tree 1",expand:!0,children:[{title:"tree 1-1",expand:!0,children:[{title:"leaf 1-1-1"},{title:"leaf 1-1-2"}]},{title:"tree 1-2",expand:!0,children:[{title:"leaf 1-2-1"},{title:"leaf 1-2-2"}]}]}],data1:[{title:"tree 1",expand:!0,children:[{title:"tree 1-1",expand:!0,children:[{title:"leaf 1-1-1",disabled:!0},{title:"leaf 1-1-2"}]},{title:"tree 1-2",expand:!0,children:[{title:"leaf 1-2-1",expand:!0,children:[{title:"leaf 1-2-1-1"},{title:"leaf 1-2-1-2"}]},{title:"leaf 1-2-2"}]}]}],data2:[{title:"children",loading:!1,children:[]}],data3:[{title:"tree 1",expand:!0,icon:"fireball",children:[{title:"tree 1-1",expand:!0,icon:"flag",children:[{title:"leaf 1-1-1",icon:"flame"},{title:"leaf 1-1-2",icon:"folder"}]},{title:"tree 1-2",expand:!0,icon:"flag",children:[{title:"leaf 1-2-1",icon:"folder"},{title:"leaf 1-2-2",icon:"folder"}]}]}]},l}return(0,u.default)(t,e),(0,d.default)(t,[{key:"onChecked",value:function(e){console.log(e)}},{key:"loadData",value:function(e,t){setTimeout(function(){t([{title:"children",loading:!1,children:[]},{title:"children",loading:!1,children:[]}])},1e3)}},{key:"render",value:function(){var e=this.state,t=e.data,l=e.data1,n=e.data2,a=e.data3;return c.default.createElement("div",null,c.default.createElement("h2",null,"Tree 树形控件"),c.default.createElement("p",null,"文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用树控件可以完整展现其中的层级关系，并具有展开收起选择等交互功能。"),c.default.createElement("h3",null,"代码示例"),c.default.createElement(o.Row,{gutter:"8"},c.default.createElement(o.Col,{span:"12"},c.default.createElement(i.default,{title:"基本用法"},c.default.createElement("div",null,c.default.createElement(o.Tree,{data:t,onSelect:function(e){return console.log(e)}})),c.default.createElement("div",null,"最简单的用法，展示可选中，默认展开功能。"),c.default.createElement("div",null,f.default.base)),c.default.createElement(i.default,{title:"可勾选"},c.default.createElement("div",null,c.default.createElement(o.Tree,{data:l,checkbox:!0,onChecked:this.onChecked.bind(this)})),c.default.createElement("div",null,"设置属性",c.default.createElement("code",null,"checkbox")," 可以对节点进行勾选。"),c.default.createElement("div",null,f.default.checked))),c.default.createElement(o.Col,{span:"12"},c.default.createElement(i.default,{title:"异步加载"},c.default.createElement("div",null,c.default.createElement(o.Tree,{data:n,onLoadData:this.loadData.bind(this)})),c.default.createElement("div",null,"点击展开节点，动态加载数据。。"),c.default.createElement("div",null,f.default.async)),c.default.createElement(i.default,{title:"自定义图标"},c.default.createElement("div",null,c.default.createElement(o.Tree,{data:a})),c.default.createElement("div",null,"可以针对不同的节点定制图标。"),c.default.createElement("div",null,f.default.icon)))),c.default.createElement("h3",null,"TreeNode API"),c.default.createElement("div",{className:"table-border"},c.default.createElement("table",null,c.default.createElement("tbody",null,c.default.createElement("tr",null,c.default.createElement("th",null,"属性"),c.default.createElement("th",null,"说明"),c.default.createElement("th",null,"类型"),c.default.createElement("th",null,"默认值")),c.default.createElement("tr",null,c.default.createElement("td",null,"data"),c.default.createElement("td",null,"可嵌套的节点属性的数组，生成 tree 的数据"),c.default.createElement("td",null,"Array"),c.default.createElement("td",null,"[]")),c.default.createElement("tr",null,c.default.createElement("td",null,"checkbox"),c.default.createElement("td",null,"是否显示多选框"),c.default.createElement("td",null,"Boolean"),c.default.createElement("td",null,"false")),c.default.createElement("tr",null,c.default.createElement("td",null,"onLoadData"),c.default.createElement("td",null,"异步加载数据的方法"),c.default.createElement("td",null,"Function"),c.default.createElement("td",null,"-")),c.default.createElement("tr",null,c.default.createElement("td",null,"onSelect"),c.default.createElement("td",null,"点击树节点时触发,当前已选中的节点数组"),c.default.createElement("td",null,"Function"),c.default.createElement("td",null,"-")),c.default.createElement("tr",null,c.default.createElement("td",null,"onChecked"),c.default.createElement("td",null,"点击复选框时触发,当前已勾选节点的数组"),c.default.createElement("td",null,"Function"),c.default.createElement("td",null,"-")),c.default.createElement("tr",null,c.default.createElement("td",null,"onExpand"),c.default.createElement("td",null,"展开和收起子列表时触发,当前已勾选节点的数组"),c.default.createElement("td",null,"Function"),c.default.createElement("td",null,"-"))))),c.default.createElement("h3",null,"Tree API"),c.default.createElement("div",{className:"table-border"},c.default.createElement("table",null,c.default.createElement("tbody",null,c.default.createElement("tr",null,c.default.createElement("th",null,"属性"),c.default.createElement("th",null,"说明"),c.default.createElement("th",null,"类型"),c.default.createElement("th",null,"默认值")),c.default.createElement("tr",null,c.default.createElement("td",null,"title"),c.default.createElement("td",null,"节点标题"),c.default.createElement("td",null,"String"),c.default.createElement("td",null,"-")),c.default.createElement("tr",null,c.default.createElement("td",null,"expand"),c.default.createElement("td",null,"是否展开节点"),c.default.createElement("td",null,"Boolean"),c.default.createElement("td",null,"false")),c.default.createElement("tr",null,c.default.createElement("td",null,"disabled"),c.default.createElement("td",null,"是否禁用节点"),c.default.createElement("td",null,"Boolean"),c.default.createElement("td",null,"false")),c.default.createElement("tr",null,c.default.createElement("td",null,"selected"),c.default.createElement("td",null,"是否点选节点"),c.default.createElement("td",null,"Boolean"),c.default.createElement("td",null,"false")),c.default.createElement("tr",null,c.default.createElement("td",null,"checked"),c.default.createElement("td",null,"节点是否勾选"),c.default.createElement("td",null,"Boolean"),c.default.createElement("td",null,"false")),c.default.createElement("tr",null,c.default.createElement("td",null,"children"),c.default.createElement("td",null,"子节点"),c.default.createElement("td",null,"Array"),c.default.createElement("td",null,"-"))))))}}]),t}(c.default.Component);t.default=m},324:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=h(l(12)),a=h(l(6)),d=h(l(5)),r=h(l(4)),u=h(l(3)),c=h(l(2)),i=h(l(1)),f=h(l(326)),o=l(21),s=l(7),m=h(l(54));function h(e){return e&&e.__esModule?e:{default:e}}var E=function(e){function t(e){(0,d.default)(this,t);var l=(0,u.default)(this,(t.__proto__||(0,a.default)(t)).call(this,e));return l.state={domHeight:0,demoHeight:0,codeHeight:0,expand:!1},l.toggle=l.toggle.bind(l),l}return(0,c.default)(t,e),(0,r.default)(t,[{key:"icons",value:function(){return this.state.expand?"code-working":"code"}},{key:"classes",value:function(){return this.className(["k-demo",(0,n.default)({},"k-demo-"+this.props.layout,this.props.layout)])}},{key:"demoStyles",value:function(){return"horizontal"==this.props.layout?{height:this.state.expand?this.state.domHeight+"px":this.state.demoHeight+"px"}:{}}},{key:"codeStyles",value:function(){return"horizontal"==this.props.layout?{}:{height:""+this.state.codeHeight}}},{key:"toggle",value:function(){this.state.expand;this.setState({expand:!this.state.expand}),"vertical"==this.props.layout&&this.setState({codeHeight:this.state.expand?"auto":0})}},{key:"setHeight",value:function(){"horizontal"==this.props.layout&&this.setState({domHeight:this.refs.dom.scrollHeight,demoHeight:this.refs.demo.scrollHeight})}},{key:"componentDidMount",value:function(){this.setHeight()}},{key:"render",value:function(){return i.default.createElement("div",{className:this.classes(),style:this.styles(this.demoStyles()),ref:"dom"},i.default.createElement("div",{className:"k-demo-main",ref:"demo"},i.default.createElement("div",{className:"k-content"},this.props.children[0]),i.default.createElement("div",{className:"k-desc"},i.default.createElement("a",{className:"k-desc-title"},this.props.title),i.default.createElement("div",{className:"k-desc-content"},this.props.children[1]),i.default.createElement("a",{className:"k-code-expan",onClick:this.toggle},i.default.createElement(o.Icon,{type:this.icons()})))),i.default.createElement("div",{className:"k-demo-line"}),i.default.createElement(m.default,{show:this.state.expand},i.default.createElement(f.default,{style:this.styles(this.codeStyles()),ref:"code",lang:this.props.lang},this.props.children[2])))}}]),t}(s.Kui);t.default=E,E.propTypes={layout:s.PropTypes.string,title:s.PropTypes.string,lang:s.PropTypes.string},E.defaultProps={layout:"vertical"}},325:function(e,t,l){"use strict";l.r(t);var n=l(324),a=l.n(n);t.default=a.a},333:function(e,t,l){"use strict";l.r(t);let n={base:"import { Tree } from 'react-kui';\nconstructor(props) {\n  super(props)\n  this.state = {\n    data: [\n      {\n        title: 'tree 1',\n        expand: true,\n        children: [\n          {\n            title: 'tree 1-1',\n            expand: true,\n            children: [\n              { title: 'leaf 1-1-1' },\n              { title: 'leaf 1-1-2' }\n            ]\n          },\n          {\n            title: 'tree 1-2',\n            expand: true,\n            children: [\n              { title: 'leaf 1-2-1' },\n              { title: 'leaf 1-2-2' }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\nReactDOM.render() {\n  return <Tree data={data} />\n}\n",checked:"import { Tree } from 'react-kui';\nconstructor(props) {\n  super(props)\n  this.state = {\n    data: [\n      {\n        title: 'tree 1',\n        expand: true,\n        children: [\n          {\n            title: 'tree 1-1',\n            expand: true,\n            children: [\n              { title: 'leaf 1-1-1', disabled: true },\n              { title: 'leaf 1-1-2' }\n            ]\n          },\n          {\n            title: 'tree 1-2',\n            expand: true,\n            children: [\n              {\n                title: 'leaf 1-2-1', expand: true, children: [\n                  { title: 'leaf 1-2-1-1', },\n                  { title: 'leaf 1-2-1-2' }\n                ]\n              },\n              { title: 'leaf 1-2-2' }\n            ]\n          }\n        ]\n      }\n    ],\n  }\n}\nonChecked(data) {\n  console.log(data)\n}\nReactDOM.render() {\n  return <Tree data={this.state.data} checkbox onChecked={this.onChecked.bind(this)} />\n}\n",async:"import { Tree } from 'react-kui';\nconstructor(props) {\n  super(props)\n  this.state = {\n    data2: [{\n      title: 'children',\n      loading: false,\n      children: []\n    }],\n  }\n}\nloadData(item, callback) {\n  //模拟异步请求\n  setTimeout(() => {\n    let data = [\n      {\n        title: 'children',\n        loading: false,\n        children: []\n      },\n      {\n        title: 'children',\n        loading: false,\n        children: []\n      }\n    ];\n    callback(data);\n  }, 1000)\n}\nReactDOM.render() {\n  return <Tree data={this.state.data} onLoadData={this.loadData.bind(this)} />\n}\n",icon:"import { Tree } from 'react-kui';\nconstructor(props) {\n  super(props)\n  this.state = {\n    data: [\n      {\n        title: 'tree 1',\n        expand: true,\n        icon: 'fireball',\n        children: [\n          {\n            title: 'tree 1-1',\n            expand: true,\n            icon: 'flag',\n            children: [\n              { title: 'leaf 1-1-1', icon: 'flame' },\n              { title: 'leaf 1-1-2', icon: 'folder' }\n            ]\n          },\n          {\n            title: 'tree 1-2',\n            expand: true,\n            icon: 'flag',\n            children: [\n              { title: 'leaf 1-2-1', icon: 'folder' },\n              { title: 'leaf 1-2-2', icon: 'folder' }\n            ]\n          }\n        ]\n      }\n    ],\n  }\n}\nReactDOM.render() {\n  return <Tree data={this.state.data} />\n}"};t.default=n}}]);